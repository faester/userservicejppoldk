/**
 * userservice.jppol.dk
 * This is a client for the userservice.jppol.dk service @ JP/Politikens Hus
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mail@medielogin.dk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/User', 'model/UserForUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/User'), require('../model/UserForUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.Userservicejppoldk) {
      root.Userservicejppoldk = {};
    }
    root.Userservicejppoldk.UserCrudApi = factory(root.Userservicejppoldk.ApiClient, root.Userservicejppoldk.ErrorResponse, root.Userservicejppoldk.User, root.Userservicejppoldk.UserForUpdate);
  }
}(this, function(ApiClient, ErrorResponse, User, UserForUpdate) {
  'use strict';

  /**
   * UserCrud service.
   * @module api/UserCrudApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UserCrudApi. 
   * @alias module:api/UserCrudApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createUser operation.
     * @callback module:api/UserCrudApi~createUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates user
     * Create a new user. useridentifier in query and Identifier in request must match.
     * @param {String} useridentifier 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserForUpdate} opts.userForCreate 
     * @param {module:api/UserCrudApi~createUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createUser = function(useridentifier, opts, callback) {
      opts = opts || {};
      var postBody = opts['userForCreate'];

      // verify the required parameter 'useridentifier' is set
      if (useridentifier === undefined || useridentifier === null) {
        throw new Error("Missing the required parameter 'useridentifier' when calling createUser");
      }


      var pathParams = {
        'useridentifier': useridentifier
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientAccess', 'userAccess'];
      var contentTypes = ['application/json+jsondate'];
      var accepts = ['application/json+jsondate'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ssouser.svc/user/{useridentifier}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UserCrudApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user
     * Users cannot delete their own account, this requires client access. The &#39;action&#39; parameter instructs Userservice to either *request* deletion of the user which marks the user for deletion after 30 days, to *complete* deletion by removing the user right away or *cancel* a pending delete. Usually clients are not allowed to *complete* user deletion.
     * @param {String} useridentifier 
     * @param {module:model/String} action 
     * @param {module:api/UserCrudApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUser = function(useridentifier, action, callback) {
      var postBody = null;

      // verify the required parameter 'useridentifier' is set
      if (useridentifier === undefined || useridentifier === null) {
        throw new Error("Missing the required parameter 'useridentifier' when calling deleteUser");
      }

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling deleteUser");
      }


      var pathParams = {
        'useridentifier': useridentifier
      };
      var queryParams = {
        'action': action
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientAccess'];
      var contentTypes = ['application/json+jsondate'];
      var accepts = ['application/json+jsondate'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ssouser.svc/user/{useridentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback module:api/UserCrudApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user by user identifier
     * 
     * @param {String} useridentifier 
     * @param {module:api/UserCrudApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUserById = function(useridentifier, callback) {
      var postBody = null;

      // verify the required parameter 'useridentifier' is set
      if (useridentifier === undefined || useridentifier === null) {
        throw new Error("Missing the required parameter 'useridentifier' when calling getUserById");
      }


      var pathParams = {
        'useridentifier': useridentifier
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientAccess', 'userAccess'];
      var contentTypes = ['application/json+jsondate'];
      var accepts = ['application/json+jsondate'];
      var returnType = User;

      return this.apiClient.callApi(
        '/ssouser.svc/user/{useridentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UserCrudApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates user
     * Only send properties you want to change.
     * @param {String} useridentifier Identifier of the user to update.
     * @param {Number} ifMatch Value of the &#39;X-Version&#39; header from last retrieval. Used for avoiding concurrency issues.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserForUpdate} opts.userForUpdate 
     * @param {module:api/UserCrudApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateUser = function(useridentifier, ifMatch, opts, callback) {
      opts = opts || {};
      var postBody = opts['userForUpdate'];

      // verify the required parameter 'useridentifier' is set
      if (useridentifier === undefined || useridentifier === null) {
        throw new Error("Missing the required parameter 'useridentifier' when calling updateUser");
      }

      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling updateUser");
      }


      var pathParams = {
        'useridentifier': useridentifier
      };
      var queryParams = {
      };
      var headerParams = {
        'If-Match': ifMatch
      };
      var formParams = {
      };

      var authNames = ['clientAccess', 'userAccess'];
      var contentTypes = ['application/json+jsondate'];
      var accepts = ['application/json+jsondate'];
      var returnType = null;

      return this.apiClient.callApi(
        '/ssouser.svc/user/{useridentifier}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
