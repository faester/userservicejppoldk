/**
 * userservice.jppol.dk
 * This is a client for the userservice.jppol.dk service @ JP/Politikens Hus
 *
 * OpenAPI spec version: 1.0.0
 * Contact: mail@medielogin.dk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PasswordCredentials', 'model/SetPasswordResponse', 'model/ValidatePasswordResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PasswordCredentials'), require('../model/SetPasswordResponse'), require('../model/ValidatePasswordResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Userservicejppoldk) {
      root.Userservicejppoldk = {};
    }
    root.Userservicejppoldk.PasswordApi = factory(root.Userservicejppoldk.ApiClient, root.Userservicejppoldk.PasswordCredentials, root.Userservicejppoldk.SetPasswordResponse, root.Userservicejppoldk.ValidatePasswordResponse);
  }
}(this, function(ApiClient, PasswordCredentials, SetPasswordResponse, ValidatePasswordResponse) {
  'use strict';

  /**
   * Password service.
   * @module api/PasswordApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PasswordApi. 
   * @alias module:api/PasswordApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authenticateUsernamePut operation.
     * @callback module:api/PasswordApi~authenticateUsernamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidatePasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate a users password
     * Allows password validation using web service calls. Usually discouraged method. Response will contain additional informatino about the user if username was found and even more when password was matched.
     * @param {String} username The username of the user to authenticate
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordCredentials} opts.password 
     * @param {module:api/PasswordApi~authenticateUsernamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidatePasswordResponse}
     */
    this.authenticateUsernamePut = function(username, opts, callback) {
      opts = opts || {};
      var postBody = opts['password'];

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling authenticateUsernamePut");
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientAccess'];
      var contentTypes = ['application/json+jsondate'];
      var accepts = ['application/json+jsondate'];
      var returnType = ValidatePasswordResponse;

      return this.apiClient.callApi(
        '/authenticate/{username}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordUseridentifierPost operation.
     * @callback module:api/PasswordApi~passwordUseridentifierPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a users password
     * Allows password validation using web service calls. Usually discouraged method. Response will contain additional informatino about the user if username was found and even more when password was matched.
     * @param {String} useridentifier The username of the user to authenticate
     * @param {Object} opts Optional parameters
     * @param {module:model/PasswordCredentials} opts.password 
     * @param {module:api/PasswordApi~passwordUseridentifierPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetPasswordResponse}
     */
    this.passwordUseridentifierPost = function(useridentifier, opts, callback) {
      opts = opts || {};
      var postBody = opts['password'];

      // verify the required parameter 'useridentifier' is set
      if (useridentifier === undefined || useridentifier === null) {
        throw new Error("Missing the required parameter 'useridentifier' when calling passwordUseridentifierPost");
      }


      var pathParams = {
        'useridentifier': useridentifier
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['clientAccess'];
      var contentTypes = ['application/json+jsondate'];
      var accepts = ['application/json+jsondate'];
      var returnType = SetPasswordResponse;

      return this.apiClient.callApi(
        '/password/{useridentifier}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
